generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified         String?   @unique
  image         String?
  accounts      Account[]
  sessions      Session[]
  projects  Project[]
}

model Project {
  id        String       @id @default(cuid())
  url       String
  driveUrl  String
  userId    String      
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  students  Student[] 
}

model Student {
  id        String    @id @default(cuid())
  name      String
  email     String   
  projectId String      
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
}


model Account {
  id                String  @id @default(cuid())
  userId            String
  provider          String
  providerAccountId String
  type              String
  access_token      String?
  expires_at        Int?
  refresh_token     String?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  refresh_token_expires_in Int?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
